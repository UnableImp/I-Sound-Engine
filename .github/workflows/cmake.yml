name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Linux-Test:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: 'true'

    - name: Configure CMake Debug
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/buildDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DSTDLIB_LINUX=True
      
    - name: Configure CMake Release
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/buildRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang  -DCMAKE_CXX_COMPILER=clang++ -DSTDLIB_LINUX=True
    
    - name: Build Tests Debug
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildDebug --config Debug --target ISETests
    
    - name: Build Benchmark Debug
      run: cmake --build ${{github.workspace}}/buildDebug --config Debug --target ISEBenchmark
      
    - name: Build Tests Release
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildRelease --config Release --target ISETests
    
    - name: Build Benchmark Release
      run: cmake --build ${{github.workspace}}/buildRelease --config Release --target ISEBenchmark
      
    - name: Copy Test Debug
      run: cp ${{github.workspace}}/buildDebug/Testing/ISETests ${{github.workspace}}/Testing
    - name: Copy Benchmark Debug
      run: cp ${{github.workspace}}/buildDebug/Testing/ISEBenchmark ${{github.workspace}}/Testing
    
    - name: Test Debug
      working-directory: ${{github.workspace}}/Testing
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./ISETests
    
    - name: Copy Test Release
      run: cp ${{github.workspace}}/buildRelease/Testing/ISETests ${{github.workspace}}/Testing
    - name: Copy Benchmark Release
      run: cp ${{github.workspace}}/buildRelease/Testing/ISEBenchmark ${{github.workspace}}/Testing
 
    - name: Test Release
      working-directory: ${{github.workspace}}/Testing
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./ISETests
    
    - name: Benchmark Release
      working-directory: ${{github.workspace}}/Testing
      run: ./ISEBenchmark
      
    - name: Install Valgrind
      run: sudo apt install -y valgrind
        
    - name: Copy Test Debug2
      run: cp ${{github.workspace}}/buildDebug/Testing/ISETests ${{github.workspace}}/Testing
      
    - name: Memory Check
      working-directory: ${{github.workspace}}/Testing
      run: valgrind --leak-check=full --leak-resolution=med --track-origins=yes -- ./ISETests
      
  Windows-Test:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: 'true'
      
    - name: Configure CMake Debug
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/buildDebug -DCMAKE_BUILD_TYPE=Debug
    
    - name: Configure CMake Release
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/buildRelease -DCMAKE_BUILD_TYPE=Release
    
    - name: Build Tests Debug
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildDebug --config Debug --target ISETests
    
    - name: Build Benchmark Debug
      run: cmake --build ${{github.workspace}}/buildDebug --config Debug --target ISEBenchmark
      
    - name: Build Tests Release
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildRelease --config Release --target ISETests
    
    - name: Build Benchmark Release
      run: cmake --build ${{github.workspace}}/buildRelease --config Release --target ISEBenchmark
      
    - name: Copy Test Debug
      run: cp ${{github.workspace}}\buildDebug\Testing\Debug\ISETests.exe ${{github.workspace}}\Testing
    - name: Copy Benchmark Debug
      run: cp ${{github.workspace}}\buildDebug\Testing\Debug\ISEBenchmark.exe ${{github.workspace}}\Testing
    
    - name: Test Debug
      working-directory: ${{github.workspace}}/Testing
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./ISETests
    
    - name: Copy Test Release
      run: cp ${{github.workspace}}\buildRelease\Testing\Release\ISETests.exe ${{github.workspace}}\Testing
    - name: Copy Benchmark Release
      run: cp ${{github.workspace}}\buildRelease\Testing\Release\ISEBenchmark.exe ${{github.workspace}}\Testing
 
    - name: Test Release
      working-directory: ${{github.workspace}}\Testing
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./ISETests
    
    - name: Benchmark Release
      working-directory: ${{github.workspace}}\Testing
      run: ./ISEBenchmark
